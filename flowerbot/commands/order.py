import datetime

from mubble import Dispatch, CallbackQuery, ParseMode
from mubble.rules import CallbackData

from flowerbot.database.user import User
from flowerbot.keyboards import cart, cart_order, menu

dp = Dispatch()


@dp.callback_query(CallbackData("cart"))
async def cart_handler(cq: CallbackQuery, user: User):
    user = await User.get(uid=cq.from_user.id)

    products_text = ""

    for i, product in enumerate(user.cart, 1):
        products_text += f"{i}.| –ù–∞–∑–≤–∞: {product['name']}, —Ü—ñ–Ω–∞ - {product['total_price']}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—É–∫–µ—Ç—ñ–≤ - {product['count']} \n"

    await cq.edit_text(
        "<b>üí´ –ö–æ—à–∏–∫:</b>\n\n"
        "–û—Å—å –≤–∞—à—ñ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏:\n"
        f"<blockquote>{products_text}</blockquote>"
        "\n\n<b>–©–æ –¥–∞–ª—ñ?</b>\n"
        "1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à –∫–æ—à–∏–∫.\n"
        "2. –Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–º–æ–≤–∏—Ç–∏'.",
        reply_markup=cart,
        parse_mode=ParseMode.HTML
    )
    await cq.answer()


@dp.callback_query(CallbackData("cart_order"))
async def order_handler(cq: CallbackQuery, user: User):
    user = await User.get(uid=cq.from_user.id)

    order_price = 0
    total_count = 0

    for i, product in enumerate(user.cart, 1):
        order_price += product['total_price']
        total_count += product['count']

    await cq.edit_text(
        "<b>üí´ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
        "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –û—Å—å –ø—ñ–¥—Å—É–º–æ–∫:\n"
        f"<blockquote>üíê –ö—ñ–ª—å–∫—ñ—Å—Ç—å –±—É–∫–µ—Ç—ñ–≤ - <i>{total_count}</i></blockquote>\n"
        f"<blockquote>üí≥ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ - <i>{order_price}</i> –≥—Ä–Ω</blockquote>"
        "\n\n<b>–©–æ –¥–∞–ª—ñ?</b>\n"
        "1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—Å—ñ –¥–∞–Ω—ñ.\n"
        "2. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
        reply_markup=cart_order,
        parse_mode=ParseMode.HTML
    )
    await cq.answer()


@dp.callback_query(CallbackData("cart_order_confirm"))
async def order_confirm_handler(cq: CallbackQuery, user: User):
    user = await User.get(uid=cq.from_user.id)
    
    order_price = 0
    total_count = 0

    cart_text = ""
    
    for i, product in enumerate(user.cart, 1):
        cart_text += f"{i}.| –ù–∞–∑–≤–∞: {product['name']}, —Ü—ñ–Ω–∞ - {product['total_price']}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—É–∫–µ—Ç—ñ–≤ - {product['count']} \n"
        order_price += product['total_price']
        total_count += product['count']

    current_time = datetime.datetime.now().isoformat()
    user.order.append({
        "description": cart_text,
        "order_price": order_price,
        "total_count": total_count,
        "city": user.city,
        "date": current_time
    })
    user.cart = []
    await user.save()

    await cq.edit_text(
        text="üå∫ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –æ–±—Ä–æ–±—Ü—ñ, –¥—è–∫—É—é –∑–∞ –ø–æ–∫—É–ø–∫—É!",
        reply_markup=menu,
        parse_mode=ParseMode.HTML
    )


@dp.callback_query(CallbackData("cart_remove_all"))
async def cart_remove_all_handler(cq: CallbackQuery, user: User):
    user = await User.get(uid=cq.from_user.id)

    user.cart = []
    await user.save()

    await cq.edit_text(
        "<b>üßπ –í–∏ —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—Å—Ç–∏–ª–∏ –∫–æ—Ä–∑–∏–Ω—É!</b>",
        reply_markup=menu,
        parse_mode=ParseMode.HTML
    )
