import datetime

from mubble import Dispatch, CallbackQuery, ParseMode
from mubble.rules import CallbackData

from flowerbot.database.user import User
from flowerbot.keyboards import cart, cart_order, menu

dp = Dispatch()


def get_products_text(cart: list[dict]) -> list[str, int | float, int | float]:
    text, order_price, total_count = "", 0, 0
    for i, product in enumerate(cart, 1):
        text += f"{i}.| –ù–∞–∑–≤–∞: {product['name']}, —Ü—ñ–Ω–∞ - {product['total_price']}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—É–∫–µ—Ç—ñ–≤ - {product['count']} \n"
        order_price += product['total_price']
        total_count += product['count']

    return [text, order_price, total_count]


@dp.callback_query(CallbackData("cart"))
async def cart_handler(cq: CallbackQuery, user: User):
    products_text, _, _ = get_products_text(user.cart)

    await cq.edit_text(
        "<b>üí´ –ö–æ—à–∏–∫:</b>\n\n"
        "–û—Å—å –≤–∞—à—ñ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏:\n"
        f"<blockquote>{products_text if products_text else '–í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ —Ç–æ–≤–∞—Ä–∏'}</blockquote>"
        "\n\n<b>–©–æ –¥–∞–ª—ñ?</b>\n"
        "1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à –∫–æ—à–∏–∫.\n"
        "2. –Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ó–∞–º–æ–≤–∏—Ç–∏¬ª.",
        reply_markup=cart,
        parse_mode=ParseMode.HTML
    )
    await cq.answer()


@dp.callback_query(CallbackData("cart_order"))
async def order_handler(cq: CallbackQuery, user: User):
    _, order_price, total_count = get_products_text(user.cart)

    if not total_count:
        await cq.delete()

        text = (
            "<b>üôâ –î–æ—Ä–æ–≥–∏–π –¥—Ä—É–∂–µ, –≤—ñ—Ç–∞—é —Ç–µ–±–µ!</b>\n\n"
            "üå∫ –Ø —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—é—Å—å –Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è—Ö –∫–≤—ñ—Ç—ñ–≤! –ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —à–∏—Ä–æ–∫–∏–π –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∫–≤—ñ—Ç–∫–æ–≤–∏—Ö –∫–æ–º–ø–æ–∑–∏—Ü—ñ–π, —è–∫—ñ –º–æ–∂—É—Ç—å —Å—Ç–∞—Ç–∏ —á—É–¥–æ–≤–∏–º –ø–æ–¥–∞—Ä—É–Ω–∫–æ–º –¥–ª—è –±—É–¥—å-—è–∫–æ—ó –ø–æ–¥—ñ—ó.\n\n"
            "–ö–≤—ñ—Ç–∏ –∑–∞–≤–∂–¥–∏ –±—É–ª–∏ —Å–∏–º–≤–æ–ª–æ–º –ª—é–±–æ–≤—ñ, –Ω—ñ–∂–Ω–æ—Å—Ç—ñ —Ç–∞ –ø–æ–≤–∞–≥–∏, —Ç–æ–º—É –º–∏ –ø—Ä–∞–≥–Ω–µ–º–æ –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ –Ω–∞–π–≤–∏—â—É —è–∫—ñ—Å—Ç—å –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è —Ç–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∫–≤—ñ—Ç—ñ–≤.\n\n"
            "<blockquote>üí° –ü–µ—Ä–µ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º –Ω–µ –∑–∞–±—É–¥—å –≤–∫–∞–∑–∞—Ç–∏ –º—ñ—Å—Ç–æ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö. –¶–µ –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–æ, –∞–¥–∂–µ –º–∏ —Ö–æ—á–µ–º–æ –±—É—Ç–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–º–∏, —â–æ —Ç–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤—á–∞—Å–Ω–æ —ñ –≤ –ø–æ—Ç—Ä—ñ–±–Ω–µ –º—ñ—Å—Ü–µ. –ó–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è–π, —â–æ–± —É—Å—ñ –¥–∞–Ω—ñ –±—É–ª–∏ –≤–∫–∞–∑–∞–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.</blockquote>\n\n"
            "–ó —Ä–∞–¥—ñ—Å—Ç—é –¥–æ–ø–æ–º–æ–∂–µ–º–æ —Ç–æ–±—ñ –æ–±—Ä–∞—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–∏–π –±—É–∫–µ—Ç! –Ø–∫—â–æ —É —Ç–µ–±–µ —î —è–∫—ñ-–Ω–µ–±—É–¥—å –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞, –Ω–µ —Å–æ—Ä–æ–º—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –¥–æ –Ω–∞—à–æ—ó —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.\n\n"
            "–ë–∞–∂–∞—î–º–æ —Ç–æ–±—ñ –≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è —Ç–∞ —á—É–¥–æ–≤–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—é! üòä\n\n"
            "–ó –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è–º–∏, —Ç–≤–æ—è –∫–æ–º–∞–Ω–¥–∞ –∑ –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–≤—ñ—Ç—ñ–≤."
        )
        await cq.ctx_api.send_message(
            chat_id=cq.chat_id,
            text=text,
            reply_markup=menu,
            parse_mode=ParseMode.HTML
        )
        await cq.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—ñ!\n–ü–µ—Ä–µ—Ö—ñ–¥ –≤ –º–µ–Ω—é...")
        return

    await cq.edit_text(
        "<b>üí´ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
        "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –û—Å—å –ø—ñ–¥—Å—É–º–æ–∫:\n"
        f"<blockquote>üíê –ö—ñ–ª—å–∫—ñ—Å—Ç—å –±—É–∫–µ—Ç—ñ–≤ - <i>{total_count}</i></blockquote>\n"
        f"<blockquote>üí≥ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ - <i>{order_price}</i> –≥—Ä–Ω</blockquote>"
        "\n\n<b>–©–æ –¥–∞–ª—ñ?</b>\n"
        "1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—Å—ñ –¥–∞–Ω—ñ.\n"
        "2. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
        reply_markup=cart_order,
        parse_mode=ParseMode.HTML
    )
    await cq.answer()


@dp.callback_query(CallbackData("cart_order_confirm"))
async def order_confirm_handler(cq: CallbackQuery, user: User):
    cart_text, order_price, total_count = get_products_text(user.cart)

    current_time = datetime.datetime.now().isoformat()
    user.order.append({
        "description": cart_text,
        "order_price": order_price,
        "total_count": total_count,
        "city": user.city,
        "date": current_time
    })
    user.cart = []
    await user.save()

    await cq.edit_text(
        text="üå∫ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –æ–±—Ä–æ–±—Ü—ñ, –¥—è–∫—É—é –∑–∞ –ø–æ–∫—É–ø–∫—É!",
        reply_markup=menu,
        parse_mode=ParseMode.HTML
    )
    await cq.answer()


@dp.callback_query(CallbackData("cart_remove_all"))
async def cart_remove_all_handler(cq: CallbackQuery, user: User):
    user.cart = []
    await user.save()

    await cq.edit_text(
        "<b>üßπ –í–∏ —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—Å—Ç–∏–ª–∏ –∫–æ—Ä–∑–∏–Ω—É!</b>",
        reply_markup=menu,
        parse_mode=ParseMode.HTML
    )
