from langchain.chains.llm import LLMChain

from mubble import Dispatch, CallbackQuery, ParseMode, WaiterMachine, MessageReplyHandler
from mubble.rules import CallbackData, HasText

from flowerbot.database import User, Catalog
from flowerbot.keyboards import menu, back_to_menu
from flowerbot.config import OPENAI_API_KEY
from flowerbot.prompts.prompts import flowerbot_assitant_prompt

from langchain_openai import OpenAI

dp = Dispatch()
wm = WaiterMachine()

llm = OpenAI(
    model='gpt-3.5-turbo-instruct',
    temperature=0.7,
    openai_api_key=OPENAI_API_KEY
)

llm_chain = LLMChain(prompt=flowerbot_assitant_prompt, llm=llm)


@dp.callback_query(CallbackData("ai_helper"))
async def ai_helper_handler(cq: CallbackQuery, user: User):
    print(wm.storage)
    text = (
        "üå∑ –Ø –±–æ—Ç, —è–∫–∏–π —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –Ω–∞ –∫–≤—ñ—Ç–∞—Ö –∑ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–∞ –¥–æ–ø–æ–º–∞–≥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –≤–∏–±–∏—Ä–∞—Ç–∏ –±—É–∫–µ—Ç–∏."
        "–í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –Ω–∞–¥–∞–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–≤—ñ—Ç–∏ –∑ –∫–∞—Ç–∞–ª–æ–≥—É, —Ä–µ–∫–æ–º–µ–Ω–¥—É–≤–∞—Ç–∏ –±—É–∫–µ—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤, "
        "–∞ —Ç–∞–∫–æ–∂ –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∑ –≤–∏–±–æ—Ä–æ–º –Ω–∞ –æ—Å–Ω–æ–≤—ñ —É–ø–æ–¥–æ–±–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.\n\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
    )

    await cq.edit_text(
        text,
        reply_markup=back_to_menu,
        parse_mode=ParseMode.HTML
    )

    msg, _ = await wm.wait(
        dp.message,
        (cq.ctx_api, cq.chat_id.unwrap()),
        HasText(),
        default=MessageReplyHandler("–ù–∞–ø–∏—à—ñ—Ç—å —Å–∞–º–µ —Ç–µ–∫—Å—Ç!")

    )

    catalog_text = "\n".join([f"–ù–∞–∑–≤–∞: {p.name} –¶—ñ–Ω–∞: {p.price} –ù–∞—è–≤–Ω—ñ—Å—Ç—å: {p.count}" for p in await Catalog.all()])
    response = llm_chain.invoke(input={"question": msg.text.unwrap(), "catalog": catalog_text})

    await cq.ctx_api.delete_message(chat_id=cq.chat_id, message_id=msg.message_id)
    await cq.edit_text(
        response.get('text'),
        reply_markup=menu,
        parse_mode=ParseMode.HTML
    )
    await cq.answer()